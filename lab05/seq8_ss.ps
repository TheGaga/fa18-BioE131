%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.9
%%CreationDate: Fri Sep 21 05:21:02 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGCGAACCUGAUGAGCUUGGUUUAGUAUUUACAGCUCCAUACAGGAGGUGUUAUCCCUAUGCAAGUUCGAUCAGGCGAAACGGUGAAAGCCGUAGGUUGGCCAGAGACAAU\
) def
/coor [
[123.54792786 259.64208984]
[135.23875427 249.76365662]
[131.92997742 235.13313293]
[128.62121582 220.50260925]
[118.26706696 209.79556274]
[122.76967621 194.62860107]
[119.46090698 179.99807739]
[116.15214539 165.36755371]
[112.84337616 150.73704529]
[109.53460693 136.10652161]
[93.63452148 135.82586670]
[79.70745850 129.04272461]
[70.20325470 117.33518982]
[66.62921906 103.10900116]
[69.31793213 89.10788727]
[77.42679596 77.88522339]
[69.50946808 65.14489746]
[61.59214020 52.40457153]
[53.67481232 39.66424561]
[45.75748444 26.92391968]
[37.84015656 14.18359280]
[29.92282677 1.44326675]
[22.00549889 -11.29705906]
[17.67416382 -0.18537501]
[9.18192673 9.47784328]
[-2.99814200 16.52454758]
[-17.96192551 15.48282337]
[-32.45378876 23.15862274]
[-46.20151520 14.21815109]
[-45.06262207 -2.14140105]
[-30.20870590 -9.09072876]
[-16.92020035 0.51904005]
[-1.95641732 1.56076479]
[1.08140314 -5.29646826]
[7.15704441 -19.01093483]
[10.19486523 -25.86816788]
[-0.63057649 -36.25131989]
[-11.45601749 -46.63446808]
[-22.28145981 -57.01762009]
[-38.28645325 -58.12203217]
[-47.28300476 -71.40516663]
[-42.36972809 -86.67733765]
[-27.31566811 -92.22304535]
[-13.66901398 -83.78809357]
[-11.89830780 -67.84306335]
[-1.07286680 -57.45991135]
[9.75257397 -47.07675934]
[20.57801628 -36.69360733]
[15.48743916 -50.80339432]
[14.30453682 -65.75667572]
[17.11333084 -80.49135590]
[23.71431351 -93.96083832]
[33.63862991 -105.20841217]
[46.18136978 -113.43518066]
[60.45163727 -118.05680847]
[75.43584442 -118.74502563]
[90.06967163 -115.45094299]
[103.31371307 -108.40854645]
[114.22725677 -98.11804199]
[122.03514099 -85.31034851]
[126.18276215 -70.89517212]
[126.37554169 -55.89641190]
[122.59977722 -41.37940216]
[115.12364960 -28.37526512]
[104.47818756 -17.80766487]
[91.41952515 -10.42720318]
[76.87519073 -6.75810337]
[61.87824631 -7.06097651]
[47.49390793 -11.31430912]
[34.74582672 -19.21438789]
[42.66315460 -6.47406197]
[50.58048248 6.26626444]
[58.49781036 19.00658989]
[66.41513824 31.74691582]
[74.33246613 44.48724365]
[82.24979401 57.22756958]
[90.16712189 69.96789551]
[106.64617157 67.63874817]
[122.77021790 74.11811829]
[133.96736145 88.35399628]
[136.68150330 107.00405121]
[151.50648499 109.28876495]
[166.33146667 111.57347870]
[181.15644836 113.85819244]
[195.98143005 116.14289856]
[211.06237793 109.70108032]
[224.01750183 119.75577545]
[221.51968384 135.96357727]
[206.13845825 141.65129089]
[193.69671631 130.96788025]
[178.87173462 128.68316650]
[164.04675293 126.39846039]
[149.22177124 124.11374664]
[134.39678955 121.82903290]
[124.16512299 132.79776001]
[127.47389221 147.42826843]
[130.78265381 162.05879211]
[134.09143066 176.68931580]
[137.40019226 191.31982422]
[147.99101257 203.07334900]
[143.25173950 217.19384766]
[146.56050110 231.82437134]
[149.86926270 246.45487976]
[164.67309570 250.34141541]
[175.96726990 260.67098999]
[181.15644836 275.07000732]
[179.04820251 290.22961426]
[170.12698364 302.66625977]
[156.44284058 309.52212524]
[141.14028931 309.22177124]
[127.73571777 301.83419800]
[119.30942535 289.05700684]
] def
/pairs [
[2 103]
[3 102]
[4 101]
[6 99]
[7 98]
[8 97]
[9 96]
[10 95]
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[21 72]
[22 71]
[23 70]
[26 33]
[27 32]
[36 48]
[37 47]
[38 46]
[39 45]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
